# See here for image contents: https://github.com/microsoft/vscode-dev-containers/tree/v0.202.5/containers/go/.devcontainer/base.Dockerfile

# [Choice] Go version (use -bullseye variants on local arm64/Apple Silicon): 1, 1.16, 1.17, 1-bullseye, 1.16-bullseye, 1.17-bullseye, 1-buster, 1.16-buster, 1.17-buster
ARG VARIANT="1.17-bullseye"
ARG LIBTORCH_URL="https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-1.8.0%2Bcpu.zip"

FROM golang:latest
USER root
# [Choice] Node.js version: none, lts/*, 16, 14, 12, 10
ARG NODE_VERSION="none"
RUN if [ "${NODE_VERSION}" != "none" ]; then su vscode -c "umask 0002 && . /usr/local/share/nvm/nvm.sh && nvm install ${NODE_VERSION} 2>&1"; fi

#RUN sed -i "s/http:\/\/archive.ubuntu.com/https:\/\/mirrors.aliyun.com/g" /etc/apt/sources.list
#RUN sed -i "s/http:\/\/deb.debian.org/http:\/\/mirrors.aliyun.com/g" /etc/apt/sources.list
#RUN sed -i "s/http:\/\/deb.debian.org/http:\/\/mirrors.aliyun.com/g" /etc/apt/sources.list

# [Optional] Uncomment this section to install additional OS packages.
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \
    && apt-get -y install --no-install-recommends \
    libavcodec-dev \
    curl \
    wget \
    zip \
    unzip \
    cmake \
    ccache \
    python3-dev \
    python3-pip \
    python3



# RUN cd /tmp && \
#     wget https://download.pytorch.org/libtorch/cpu/libtorch-macos-1.10.0.zip && \
#     unzip libtorch-macos-1.10.0.zip -d /opt

RUN pip3 install typing_extensions pyyaml -i https://pypi.tuna.tsinghua.edu.cn/simple/

# [Optional] Uncomment the next line to use go get to install anything else you need
# RUN go get -x <your-dependency-or-tool>

#RUN mkdir /root/.ssh
#RUN chmod 755 /root/.ssh
#COPY id_rsa /root/.ssh/id_rsa
#COPY id_rsa.pub /root/.ssh/id_rsa.pub
#COPY ./pytorch /tmp/pytorch
#
##RUN cd /tmp && \
##    git clone -b v1.9.1 --depth 1 --recurse-submodule git@github.com:pytorch/pytorch.git
#RUN ls /tmp/pytorch && cd /tmp/pytorch/third_party/onnx && mkdir build  && cd build && cmake ../ -DPYTHON_EXECUTABLE=/usr/bin/python3 && cmake --build . --target install -j 12
#
#RUN cd ../../../../ && mkdir build && cd build && \
#     cmake -DTORCH_CUDA_ARCH_LIST="6.1"  # copile only for my arch (faster) \
#      # build static instead of shared libs
#      -DBUILD_SHARED_LIBS=OFF \
#      # use our own protobuf in /usr/local/libprotobuf.a and /usr/local/include/google/protobuf
#      -DBUILD_CUSTOM_PROTOBUF=OFF \
#      # uses fbgemm functions instead of caffe2::EmbeddingLookup
#      # caffe2::EmbeddingLookup is not compiled and results in undefined reference to it
#      -DUSE_FBGEMM=ON \
#      # fixes issues with undeclared identifier 'PThreadPool', etc.
#      -DUSE_NNPACK=ON  \
#      # sould set onnx namespace from onnx_torch to onnx but it does not
#      -DUSE_SYSTEM_ONNX=ON  \
#      # fixes the above line
#      -DONNX_NAMESPACE="onnx" \
#      # turn off everything unimportant (minimal build)
#      -DUSE_QNNPACK=OFF -DUSE_PYTORCH_QNNPACK=OFF  -DUSE_XNNPACK=OFF -DUSE_DISTRIBUTED=OFF \
#      -DUSE_MKLDNN=OFF -DBUILD_PYTHON=OFF -DBUILD_CAFFE2=OFF  -DUSE_NCCL=OFF \
#      # other options, install to /usr/local/libtorch
#      -DUSE_CUDA=ON -DCMAKE_BUILD_TYPE=Release \
#      -DCMAKE_INSTALL_PREFIX=/usr/local/libtorch ../pytorch
#
#RUN cmake --build . --target install --parallel 12

#ENV LIBRARY_PATH="/usr/local/lib:${LIBRARY_PATH}"
#ENV LD_LIBRARY_PATH="/usr/local/lib:${LD_LIBRARY_PATH}"
#ENV C_INCLUDE_PATH="/usr/local/include:/usr/local/include/torch/csrc/api/include:${C_INCLUDE_PATH}"
#ENV CPLUS_INCLUDE_PATH="/usr/local/include:/usr/local/include/torch/csrc/api/include:${CPLUS_INCLUDE_PATH}"

RUN cd /tmp && \
    wget -O libtorch.zip https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-1.8.0%2Bcpu.zip && \
    unzip libtorch.zip && \
    mv /tmp/libtorch /usr/local/libtorch

ENV LIBRARY_PATH="/usr/local/libtorch/lib:${LIBRARY_PATH}"
ENV LD_LIBRARY_PATH="/usr/local/libtorch/lib:${LD_LIBRARY_PATH}"
ENV C_INCLUDE_PATH="/usr/local/libtorch/include:/usr/local/libtorch/include/torch/csrc/api/include:${C_INCLUDE_PATH}"
ENV CPLUS_INCLUDE_PATH="/usr/local/libtorch/include:/usr/local/libtorch/include/torch/csrc/api/include:${CPLUS_INCLUDE_PATH}"
